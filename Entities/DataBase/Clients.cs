//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfAppSalon.Entities.DataBase
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Clients
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Clients()
        {
            this.ServiceClients = new HashSet<ServiceClients>();
            this.TagsClient = new HashSet<TagsClient>();
        }
    
        public int IDClient { get; set; }
        public string LastName { get; set; }
        public string FirstName { get; set; }
        public string Patronymic { get; set; }
        public string Gender { get; set; }
        public string NumberPhone { get; set; }
        public Nullable<System.DateTime> BD { get; set; }
        public string Email { get; set; }
        public Nullable<System.DateTime> DateRegistration { get; set; }
        public string Photo { get; set; }
    
        public virtual Gender Gender1 { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ServiceClients> ServiceClients { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<TagsClient> TagsClient { get; set; }

        private static SalonFaceEntities db = new SalonFaceEntities();

        public string DateLastVisit
        {
            get
            {
                var temp = db.ServiceClients.Where(c => c.ClientID == IDClient).ToList();
                if (temp == null || temp.Count == 0)
                {
                    return "";
                }
                else
                {
                    return temp.Max(c => c.TimeRecord).Value.ToShortDateString();
                }
            }
        }
        public int VisitCount
        {
            get
            {
                return db.ServiceClients.Where(c => c.ClientID == IDClient).Count();
            }
        }
        public List<Tags> Tags
        {
            get
            {
                return db.TagsClient.Where(c => c.ClientID == IDClient).Select(c => c.Tags).ToList();
            }
        }
        public string Gen
        {
            get
            {
                return db.Gender.Where(c => c.IDGender == Gender).FirstOrDefault().NameGender;
            }
        }
        public string BirthDay
        {
            get
            {
                return BD.Value.ToShortDateString();
            }
        }
        public string Registration
        {
            get
            {
                return DateRegistration.Value.ToShortDateString();
            }
        }
    }
}
